# Generated by Django 3.2.6 on 2022-09-01 10:17

from django.db import migrations, models
import django.db.models.deletion
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('applications', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('firstname', models.CharField(max_length=100)),
                ('lastname', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('registration_code', models.IntegerField(blank=True, default=0, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('counts_of_type', models.IntegerField(default=0)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='media/', verbose_name='Аватарка')),
                ('group', models.CharField(choices=[('DM', 'Admin'), ('US', 'User'), ('ST', 'Student')], default='ST', max_length=2)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='app', to='applications.app')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
                'unique_together': {('email', 'app')},
            },
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
    ]
